array {[player,] slot} Returns an associative array of known item data in the slot given, or null if there isn't any.

----

Below is a reference for all the fields that can be found in an item meta array.
Not all vanilla data is fully supported, though, whether due to limitations in the server API or missing support in CH.
So if you use other plugins or vanilla commands to create unique items with fields unsupported here, then modifying,
storing, and restoring those item meta arrays using CH functions can lead to data loss.
However, in those cases CH functions can still safely create new items or be used to check data on existing items.
See at the bottom for a list of unsupported fields. Supported fields or item types may have additional notes on limitations.

==== Common Fields ====
These fields exist for all items with meta.
{| class="wikitable"
|-
! scope="col" width="12%" | Field
! scope="col" width="15%" | Type
! scope="col" width="73%" | Description
|-
! display
| string
| The display name seen when renamed in an anvil (or null).
|-
! lore
| array
| A list of strings that is displayed when hovering the item (or null). As lines are plain text, they do not yet support some advanced text components, but color codes are supported.
|-
! model
| int
| Represents vanilla's CustomModelData tag for use with resource packs (or null). In 1.21.4+, this represents the first float in custom_model_data rounded down.
|-
! flags
| array
| Flags used to hide meta in the item tooltip: %ITEM_FLAGS%.
|-
! repair
| int
| The additional cost to repair or combine this item in an anvil.
|-
! enchants
| associative array
| The enchantments on this item.
* '''&lt;enchantment_name&gt;''' : (associative array) The name of the enchantment as the key (e.g. "fire_aspect") An integer for the level can be used as the value instead of an array.
** '''elevel''' : (int) The level of the enchantment.
|-
! modifiers
| array
| A list of attribute modifier arrays (or null).
* (associative array)
** '''attribute''' : (string) One of %ATTRIBUTES%.
** '''operation''' : (string) One of %OPERATIONS%.
** '''amount''' : (double) The value used in the modifier operation.
** '''id''' : (string) An item can only have one modifier with the same id.
** '''slot''' : (string) Possible slots are %SLOTS% or one of the slot groups %SLOTGROUPS%.
|-
! tags
| associative array
| Custom tags used by plugins (or null).
* '''&lt;custom_key&gt;''' : (associative array) Each tag's key is namespaced (e.g. "commandhelper:mytag"). If not provided, "commandhelper" will be used as a namespace.
** '''type''' : (string) Possible types: %TAG_TYPES%.
** '''value''' : (mixed) A valid value for the given tag type.
|}

==== Optional Fields ====
These fields optionally exist for any item type.
{| class="wikitable"
|-
! scope="col" width="12%" | Field
! scope="col" width="15%" | Type
! scope="col" width="73%" | Description
|-
! damage
| int
| The amount of damage on the durability of the item. 0 is undamaged. The max value is determined by the item type's default durability or "maxdamage" if set.
|-
! unbreakable
| boolean
| If the item cannot be damaged when used. Also hides item durability bar. Field always exists if "damage" exists.
|-
! maxstacksize
| int
| Overrides the maximum quantity of items with identical meta that will stack. Must be from 1 to 99. (MC 1.20.6+)
|-
! maxdamage
| int
| Overrides the item's max durability. Value must be positive. (MC 1.20.6+)
|-
! glint
| boolean
| Overrides the item's enchantment glint state. (MC 1.20.6+)
|-
! rarity
| string
| Overrides the item's rarity, which affects the item name color. Can be COMMON (white), UNCOMMON (yellow), RARE (aqua), or EPIC (light purple). (MC 1.20.6+)
|-
! food
| associative array
| Overrides the consumable item's food stats. (MC 1.20.6+)
* '''nutrition''' : (int) Food restored on the hunger bar when consumed. (default: 0)
* '''saturation''' : (double) The amount of saturation that is increased when consumed. (default: 0.0)
* '''always''' : (boolean) Whether the food can be consumed even if the hunger bar is full. (default: false)
|-
! jukeboxsong
| string
| Overrides the item's playable jukebox song. (MC 1.21+)
|-
! enchantability
| int
| Overrides the item's enchantability in an enchanting table. Value must be positive. Higher values allow applicable enchantments with higher costs to be picked. (MC 1.21.3+)
|-
! glider
| boolean
| Overrides if the item allows gliding like an elytra when equipped. (MC 1.21.3+)
|-
! remainder
| associative array
| Overrides the remaining item when the quantity of this item decreases after use. (e.g. a bucket after drinking a milk bucket) (MC 1.21.3+)
|-
! cooldown
| associative array
| Overrides the item's cooldown on use. The cooldown temporarily prevents any right-click actions for items of the same type or with the same cooldown group, if set. Not all item types activate cooldowns on use. (MC 1.21.3+)
* '''seconds''' : (double) The number of seconds the cooldown lasts when the item is used. (default: 1.0)
* '''group''' : (string) If this namespaced id is present, it shares cooldowns with items with the same cooldown group instead of by item type. (optional)
|-
! itemmodel
| string
| Overrides the item's model using a namespaced resource location. (/assets/<namespace>/items/<id>) (MC 1.21.3+)
|-
! tooltipstyle
| string
| Overrides the item's tooltip style using a namespaced resource location. (/assets/<namespace>/textures/gui/sprites/tooltip/<id>) (MC 1.21.3+)
|-
! equippable
| associative array
| Overrides the item's equippable component. Requires a slot. (MC 1.21.3+)
* '''asset''' : (string) If this namespaced resource location is present, the equipment asset will be used to determine the model when the item is equipped. (assets/<namespace>/equipment/<id>.json)
* '''damageable''' : (boolean) Whether the durability is damaged when the wearer is damaged. (defaults to true)
* '''dispensable''' : (boolean) Whether the item can be equipped using a dispenser. (defaults to true)
* '''entities''' : (array) If present, only the listed living entity types can equip this item. Entity tags cannot be set and are converted to an array of types when read.
* '''overlay''' : (string) If this namespaced resource location is present, the texture will be used as a camera overlay when the item is equipped. (assets/<namespace>/textures/<id>)
* '''slot''' : (string) The slot to put the item on. Can be %SLOTS%.
* '''sound''' : (string) The namespaced id of the sound played when the item is equipped. (defaults to 'item.armor.equip_generic') New sound event definitions are not supported here.
* '''swappable''' : (boolean) Whether the item can be equipped into the slot by right-clicking. (defaults to true)
* '''interactable''' : (boolean) Whether the item can be equipped onto a valid entity by right-clicking them. (defaults to false) (MC 1.21.5+)
The component fields "can_be_sheared" and "shearing_sound" are not yet supported.
|}

==== Type Specific Fields ====
These fields only exist for specific item types.
{| class="wikitable"
|-
! scope="col" width="14%" | Item Type
! scope="col" width="86%" | Meta
|-
! Armor
|
* '''trim''' : (associative array) Defines an armor trim. (MC 1.20+)
** '''pattern''' : Pattern can be %TRIM_PATTERNS%.
** '''material''' : Material can be %TRIM_MATERIALS%.
|-
! AxolotlBucket
|
This field may only return the default value on 1.21.5 due to a server API implementation bug.
* '''variant''' : (string) The type of axolotl, one of %AXOLOTL_TYPES%. (MC 1.17+)
The entity's custom name is derived from the item "display" string. All other axolotl data is not yet supported.
|-
! Banners
|
* '''patterns''' : (array) An array of pattern associative arrays for each layer.
** (associative array)
*** '''color''' : One of %DYE_COLORS%.
*** '''shape''' : One of %PATTERN_SHAPES%.
|-
! Bee Hives/Nests
|
* '''beecount''' : (int) The number of bees stored in this hive or nest (0 - 3). (requires MC 1.20.6+ to set)
Stored Bee data is not yet supported.
|-
! Blocks
|
* '''blockdata''' : (associative array) Block data, also known as block states in vanilla, like is returned from get_blockdata() (or null).
** '''block''' : (string) Block material name (optional)
** '''&lt;state_name&gt;''' : (int, boolean, string) The state value.
Only returns specified states as of 1.20.6. Prior versions return all states. Can only set specific states without defaults as of 1.21.3.
|-
! Books
|
* '''pages''' : (array) An array of pages as strings. New lines supported. (100 page limit)
In addition, signed Written Books have the following keys:
* '''title''' : (string) The title of the book. (32 character limit)
* '''author''' : (string) The author of the book.
* '''generation''' : (string) The generation of the book. Can be ORIGINAL, COPY_OF_ORIGINAL, COPY_OF_COPY, or TATTERED (the last two cannot be copied).
As pages are plain text, they do not yet support some advanced text components.
|-
! Brewing Stands
|
* '''brewtime''' : (int) The amount of time left in ticks before brewing completes.
* '''fuel''' : (int) The amount of fuel left.
* '''inventory''' : (associative array) Defines items in each slot
** '''fuel''' : (item array) The item that will consumed when brewing stand fuel is empty. Typically blaze powder or null.
** '''ingredient''' : (item array) The top slot item ingredient or null.
** '''leftbottle''' : (item array) Bottle slots are typically a type of potion or null, but can also be a glass bottle.
** '''middlebottle''' : (item array)
** '''rightbottle''' : (item array)
|-
! Bundle
|
* '''items''' : (array) An array of item arrays that exist in this bundle. (MC 1.17+)
|-
! CommandBlocks
|
* '''command''' : (string) The command set for this commandblock.
* '''customname''' : (string) The name of this commandblock. (default: '@')
The remaining tags are not yet supported.
|-
! Compass
|
* '''target''' : (associative array) The location this compass will point to, or null to use normal compass target.
* '''lodestone''' : (boolean) If the target location is a tracked lodestone. If true, compass spins if no lodestone exists there.
|-
! Crossbows
|
* '''projectiles''' : (array) An array of item arrays that are loaded in the crossbow. Items must be arrows or fireworks. When fired, the first item is the middle projectile. (maximum of three projectiles)
|-
! Decorated Pots
|
* '''sherds''' : (associative array) Pottery sherds for each side of the decorated pot.
** '''front''' : (string) Can only be a sherd material name or brick if empty.
** '''back''' : (string)
** '''left''' : (string)
** '''right''' : (string)
* '''item''' : (associative array) An item array for the stack contained in the decorated pot, or null if empty. (MC 1.20.4+)
|-
! Enchanted Books
|
* '''stored''' : (associative array) An array of enchantments, in the same format as "enchants".
|-
! Firework Star
|
* '''effect''' : (associative array) A firework star effect that can be used to craft fireworks
** '''flicker''' : (boolean) Whether the sparks twinkle and pop. (default: false)
** '''trail''' : (boolean) Whether the sparks leave particle trails. (default: false)
** '''type''' : (string) One of %FIREWORK_TYPES%. (default: BALL)
** '''colors''' : (array) The starting colors of the sparks as multiple color arrays. (can use color names; can be set to one color) (default: WHITE)
** '''fade''' : (array) The ending colors of the sparks as multiple color arrays. (can use color names; can be set to one color)
|-
! Firework Rockets
|
* '''firework''' : (associative array) A firework rocket's attributes.
** '''strength''' : (int) How long in seconds the rocket will last. (-1 for instant detonation)
** '''effects''' : (array) Multiple firework star effect arrays. (see Firework Star above)
|-
! Furnaces
|
* '''burntime''' : (int) The amount of time left in ticks before the furnace extinguishes.
* '''cooktime''' : (int) The amount of time in ticks the item has been cooking for.
* '''inventory''' : (associative array) Defines items in each slot
** '''result''' : (associative array) The resulting smelted item, or null.
** '''fuel''' : (associative array) The item stack that will be consumed when "burntime" reaches zero, or null.
** '''smelting''' : (associative array) The current item stack being smelted, or null.
|-
! GoatHorns
|
* '''instrument''' : (string) The instrument name (can be ponder_goat_horn, sing_goat_horn, seek_goat_horn, feel_goat_horn, admire_goat_horn, call_goat_horn, yearn_goat_horn, dream_goat_horn). (MC 1.19.3+)
Custom instrument definitions featuring a different sound event, description, duration and range are not yet supported. (missing server API)
|-
! Inventory Blocks
|
* '''inventory''' : (associative array) An array of item arrays, where each existing index is an inventory slot. (exceptions exist for furnaces and brewing stands)
|-
! Knowledge Books
|
* '''recipes''' : (array) A list of namespaced recipe keys. (or null)
|-
! Leather Armor
|
* '''color''' : (associative array) An RGB color array for the dye in the leather armor.
** '''r''' : (int) Red value ranging from 0 to 255
** '''g''' : (int) Green value
** '''b''' : (int) Blue value
|-
! Filled Maps
|
* '''mapid''' : (int) The unique id for a map on the server.
* '''color''' : (associative array) An RGB color array for the ink used on the map item.
** '''r''' : (int) Red value ranging from 0 to 255
** '''g''' : (int) Green value
** '''b''' : (int) Blue value
|-
! Ominous Bottle
|
* '''ominousamplifier''' : (int) The bad omen potion effect amplifier for this ominous bottle. (0 - 4)
|-
! Player Heads
|
* '''owner''' : (string) The user name. Can be null if there is no owner.
* '''owneruuid''' : (string) The user UUID. Can be null if there is no owner.
* '''texture''' : (string) The texture property value used for custom heads. This is a base64 encoded JSON object seen under the "Value" key in vanilla. It contains the skin texture URL among other things. Requires an owner. (Paper only)
* '''noteblocksound''' : (string) The namespaced sound id played when player head is on top of a noteblock. (MC 1.19.3+)
|-
! Potions
|
* '''potiontype''' : (string) The base potion type, which can be one of: %POTION_TYPES%. (MC 1.20.6+)
* '''base''' : (associative array) Legacy base potion effect. This was used prior to MC 1.20.6 and is converted in later versions. Use "potiontype" on later versions.
** '''extended''' : (boolean)
** '''upgraded''' : (boolean)
** '''type''' : (string)
* '''potions''' : (associative array) A list of effects that get applied with this potion.
** '''&lt;effect_name&gt;''' : (associative array)
*** '''id''' : (int) Legacy effect id. Only used if potions array is not associative.
*** '''strength''' : (int) The level of the potion effect, starting with zero. (default: 0)
*** '''seconds''' : (int) The number of seconds the effect lasts for. (default: 30)
*** '''ambient''' : (boolean) Whether the particles are more transparent. (default: false)
*** '''particles''' : (boolean) Whether the particles are visible at all. (default: true)
*** '''icon''' : (boolean) Whether the effect icon is visible for the player. (default: true)
* '''color''' : (array) An RGB color array for the tint of the potion item.
** '''r''' : (int) Red value ranging from 0 to 255
** '''g''' : (int) Green value
** '''b''' : (int) Blue value
|-
! Suspicious Stew
|
* '''potions''' : (associative array) See potion meta.
|-
! Shields
|
* '''basecolor''' : (string) A color name, one of %DYE_COLORS%.
* '''patterns''' : (array) See Banner "patterns".
|-
! Signs
|
* '''signtext''' : (array) An array of 4 strings, one for each line of text on the front.
* '''color''' : (string) The dye color for the text on the front. (default: 'BLACK')
* '''glowing''' : (boolean) Whether the sign has glowing text on the front. (MC 1.17.1+)
* '''backtext''' : (array) An array of 4 strings, one for each line of text on the back. (MC 1.20+)
* '''backcolor''' : (string) The dye color for the text on the back. (default: 'BLACK') (MC 1.20+)
* '''backglowing''' : (boolean) Whether the sign has glowing text on the back. (MC 1.20+)
* '''waxed''' : (boolean) Whether the sign is waxed. (MC 1.20.1+)
|-
! Spawn Eggs
|
The entity's custom name is derived from the item "display" string. Additional data for the entity spawned is not supported.
|-
! Spawners
|
* '''spawntype''' : (string) May be one of %ENTITY_TYPES%. Not all entity types will spawn from spawners, and some require special conditions.
* '''delay''' : (int) The time in ticks until the spawner will spawn the next batch of entities.
* '''mindelay''' : (int) The lower bounds of a new random delay chosen after each batch of entities spawn. (must be <= "maxdelay")
* '''maxdelay''' : (int) The upper bounds of a new random delay. (must be above zero and >= mindelay)
* '''spawncount''' : (int) The number of entities to attempt to spawn in each batch.
* '''maxnearbyentities''' : (int) The number of "spawntype" entities within just over "spawnrange" distance that'll prevent further spawns.
* '''spawnrange''' : (int) The maximum distance in the x or z axis new entities will spawn from the spawner.
* '''playerrange''' : (int) The maximum distance a player must be within to cause the spawner to spawn.
Spawn potentials other than entity type is not yet supported.
|-
! Tropical Fish Bucket
|
These fields may be null on 1.21.5 due to a server API implementation bug.
* '''fishcolor''' : (string) The color of the fish, can be one of %DYE_COLORS%.
* '''fishpatterncolor''' : (string) The color of the pattern on the fish.
* '''fishpattern''' : (string) The pattern type on the fish, can be one of %FISH_PATTERNS%.
The entity's custom name is derived from the item "display" string. All other tropical fish data is not yet supported.
|}

==== Unsupported Fields ====
Data components not yet supported in item meta:
{| class="wikitable"
|-
! scope="col" width="20%" | Field
! scope="col" width="10%" | MCVersion
! scope="col" width="70%" | Notes
|-
! can_break
| 1.13.2
| Paper only
|-
! can_place_on
| 1.13.2
| Paper only
|-
! item_name
| 1.20.5
|
|-
! intangible_projectile
| 1.20.5
| Paper 1.21.3+ only
|-
! tool
| 1.20.5
| Cannot read tags in 'rules' field; 'can_destroy_blocks_in_creative' field only in Paper
|-
! lock
| 1.20.5
| Server API is write only
|-
! damage_resistant
| 1.21.2
|
|-
! death_protection
| 1.21.2
| Paper only
|-
! repairable
| 1.21.2
| Paper only
|-
! consumable
| 1.21.2
| Added in Spigot 1.21.4 API; Paper API separate
|-
! custom_model_data
| 1.21.4
| Needed for anything other than a single float rounded down in the 'model' field
|-
! weapon
| 1.21.5
| Separate Paper/Spigot API
|-
! blocks_attacks
| 1.21.5
| Separate Paper/Spigot API
|-
! break_sound
| 1.21.5
| Separate Paper/Spigot API
|-
! provides_banner_patterns
| 1.21.5
| Paper only
|-
! provides_trim_material
| 1.21.5
| Paper only
|-
! potion_duration_scale
| 1.21.5
| Paper only
|-
! tooltip_display
| 1.21.5
| Partially supported with 'flags' field
|}
