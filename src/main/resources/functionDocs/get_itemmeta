array {[player,] slot} Returns an associative array of known item meta for the slot given, or null if there isn't any. ----

Below are the available fields in the item meta array. Fields can be null when the item meta doesn't have that value (except in some cases where the type is an array).

{| width="80%" cellspacing="1" cellpadding="1" border="1" class="wikitable"
|-
! scope="col" width="15%" | Item Type
! scope="col" width="85%" | Meta
|-
| All Items
|
* '''display''' : (string) The display name seen when the item is selected.
* '''lore''' : (array) An array of strings that is displayed when hovering the item.
* '''enchants''' : (array) An associative array of enchantments with the vanilla name of enchantment as the key, and value being an enchantment array with the key '''"elevel"''' for the level of the enchantment.
* '''model''' : (int) Represents vanilla's CustomModelData tag for use with resource packs.
* '''flags''' : (array) Possible flags: ''%ITEM_FLAGS%''.
* '''repair''' : (int) The cost to repair or combine this item in an anvil.
* '''modifiers''' : (array) An array of attribute modifier arrays, each with keys: '''"attribute"''', '''"operation"''', '''"amount"''' (double), '''"uuid"''' (optional), '''"name"''' (optional), and '''"slot"''' (optional). Possible attributes: ''%ATTRIBUTES%''. Possible operations: ''%OPERATIONS%''. Possible slots: ''%SLOTS%''.
|-
| All Damageable Items
|
* '''damage''' : (int) The amount of damage on the item. 0 is undamaged. Maximum is determined by each item type's max durability.
* '''unbreakable''' : (boolean) Whether or not the item can be damaged.
|-
| Armor Trim
|
* '''trim''' : (array) An array that contains the keys '''"pattern"''' and '''"material"'''. Pattern can be %TRIM_PATTERNS%. Material can be %TRIM_MATERIALS%. (MC 1.20+)
|-
| AxolotlBucket
|
* '''variant''' : (string) The type of axolotl, one of ''%AXOLOTL_TYPES%''. (MC 1.17+)
|-
| Banners
|
* '''patterns''' : (array) An array of pattern arrays. Each can contain the keys '''"color"''' (one of ''%DYE_COLORS%'') and '''"shape"''' (one of ''%PATTERN_SHAPES%'').
|-
| BlockData
|
* '''blockdata''' : (array) An array of blockdata (known as block states in vanilla) like is returned from get_blockdata(), or null if none.
|-
| Books
|
* '''title''' : (string) The title of the book.
* '''author''' : (string) The author of the book.
* '''pages''' : (array) An array of pages as strings. New lines supported. 256 character limit per page. 50 page limit.
|-
| Brewing Stands
|
* '''brewtime''' : (int) The amount of time left in ticks before brewing completes.
* '''fuel''' : (int) The amount of fuel left.
* '''inventory''' : (array) An associative array with the slots for '''"fuel"''', '''"ingredient"''', '''"leftbottle"''', '''"middlebottle"''', and '''"rightbottle"'''.
|-
| Bundle
|
* '''items''' : (array) An array of item arrays that exist in this bundle. (MC 1.17+)
|-
| CommandBlocks
|
* '''command''' : (string) The command set for this commandblock.
* '''customname''' : (string) The name of this commandblock. (default: '@')
|-
| Compass
|
* '''target''' : (array) The location this compass will point to, or null to use normal compass target.
* '''lodestone''' : (boolean) If the target location is a tracked lodestone. If true, compass spins if no lodestone exists there.
|-
| Crossbows
|
* '''projectiles''' : (array) An array of item arrays that are loaded in the crossbow. Items must be arrows or fireworks. When fired, the first item is the middle projectile. (maximum of three projectiles)
|-
| Enchanted Books
|
* '''stored''' : (array) An associative array of enchantments, just like "enchants".
|-
| Firework Charges
|
* '''effect''' : (array) A firework effect array, can have the keys '''"flicker"''' (boolean), '''"trail"''' (boolean), '''"type"''' (one of ''%FIREWORK_TYPES%''), '''"colors"''' (array of color names or color arrays), and '''"fade"''' (array of color names or color arrays).
|-
| Fireworks
|
* '''firework''' : (array) An array with the keys '''"strength"''' (int), how long in seconds the rocket will last, and '''"effects"''', an array of effect arrays (see Firework Charges).
|-
| Furnaces
|
* '''burntime''' : (int) The amount of time left in ticks before the furnace extinguishes.
* '''cooktime''' : (int) The amount of time in ticks the item has been cooking for.
* '''inventory''' : (array) An associative array with the slots for '''"result"''', '''"fuel"''', and '''"smelting"'''.
|-
| GoatHorns
|
* '''instrument''' : (string) The instrument name (can be ponder_goat_horn, sing_goat_horn, seek_goat_horn, feel_goat_horn, admire_goat_horn, call_goat_horn, yearn_goat_horn, dream_goat_horn). (MC 1.19.3+)
|-
| Inventory Blocks
|
* '''inventory''' : (array) An array of item arrays, where each index is an inventory slot. (exceptions exist for furnaces and brewing stands)
|-
| Leather Armor
|
* '''color''' : (array) A color array, with '''"r"''', '''"g"''', and '''"b"''' keys that have values ranging from 0 to 255.
|-
| Maps
|
* '''mapid''' : (int) The unique id for a map on the server.
* '''color''' : (array) An array of the map item's color, with '''"r"''', '''"g"''', and '''"b"''' keys that have values ranging from 0 to 255.
|-
| Player Heads
|
* '''owner''' : (string) The user name. Can be null if there is no owner.
* '''owneruuid''' : (string) The user UUID. Can be null if there is no owner.
* '''texture''' : (string) The texture property value used for custom heads. This is a base64 encoded JSON object seen under the "Value" key in vanilla. It contains the skin texture URL among other things. Requires an owner. (Paper only)
|-
| Potions
|
* '''base''' : (array) Defines the base potion effect. Has the keys '''"extended"''', '''"upgraded"''', and '''"type"''' which can be: ''%POTION_TYPES%''.
* '''potions''' : (array) An associative array of custom potion effect arrays, where each key is the vanilla potion effect name. Each effect array can contain the keys: '''"id"''' (int), '''"strength"''' (int), '''"seconds"''' remaining (int), whether the effect is '''"ambient"''', whether '''"particles"''' are enabled, and whether the '''"icon"''' is shown to the player.
* '''color''' : (array) A color array, with '''"r"''', '''"g"''', and '''"b"''' keys that have values ranging from 0 to 255.
|-
| Suspicious Stew
|
* '''potions''' : (array) An associative array identical to the one for potion meta.
|-
| Shields
|
* '''basecolor''' : (string) A color name, one of ''%DYE_COLORS%''.
* '''patterns''' : (array) See Banner "patterns".
|-
| Signs
|
* '''signtext''' : (array) An array of 4 strings, one for each line of text on the front.
* '''color''' : (string) The dye color for the text on the front. (default: 'BLACK')
* '''glowing''' : (boolean) Whether the sign has glowing text on the front. (MC 1.17.1+)
* '''backtext''' : (array) An array of 4 strings, one for each line of text on the back. (MC 1.20+)
* '''backcolor''' : (string) The dye color for the text on the back. (default: 'BLACK') (MC 1.20+)
* '''backglowing''' : (boolean) Whether the sign has glowing text on the back. (MC 1.20+)
* '''waxed''' : (boolean) Whether the sign is waxed. (MC 1.20.1+)
|-
| Spawners
|
* '''spawntype''' : (string) May be one of ''%ENTITY_TYPES%''. Not all entity types will spawn from spawners, and some require special conditions.
* '''delay''' : (int) The time in ticks until the spawner will spawn the next batch of entities.
* '''mindelay''' : (int) The lower bounds of a new random delay chosen after each batch of entities spawn. (must be <= 'maxdelay')
* '''maxdelay''' : (int) The upper bounds of a new random delay. (must be above zero and >= mindelay)
* '''spawncount''' : (int) The number of entities to attempt to spawn in each batch.
* '''maxnearbyentities''' : (int) The number of 'spawntype' entities within just over 'spawnrange' distance that'll prevent further spawns.
* '''spawnrange''' : (int) The maximum distance in the x or z axis new entities will spawn from the spawner.
* '''playerrange''' : (int) The maximum distance a player must be within to cause the spawner to spawn.
|-
| Tropical Fish Buckets
|
* '''fishcolor''' : (string) The color of the fish, can be one of ''%DYE_COLORS%''.
* '''fishpatterncolor''' : (string) The color of the pattern on the fish.
* '''fishpattern''' : (string) The pattern type on the fish, can be one of ''%FISH_PATTERNS%''.
|}
